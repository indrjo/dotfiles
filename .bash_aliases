#!/usr/bin/env sh

set -o pipefail

# **********
# * SYSTEM *
# **********

# Getting rid of useless garbage, using pacman.
alias clean='pacman -Qtdq | sudo pacman -Rnsu -'

# The same as above, but using yay instead.
alias yay-clean='yay -Qtdq | yay -Rnsu -'

# Regenerating the file grub.cfg.
regen-grub-cfg () {
  sudo grub-mkconfig -o /boot/grub/grub.cfg
}

# Update the list of mirrors for Arch Linux updates. Servers from Germany,
# France and Italy are interrogated due to geographical conveniences. I may
# use also servers from Austria and Switzerland as well.
update-arch-mirrors () {
  sudo reflector \
    --latest 6 \
    --sort rate \
    --protocol https,http \
    --country Germany,France,Italy \
    --save /etc/pacman.d/mirrorlist
}

# Make sure there exists the directory ~/.tmp in your home. It is a space
# where to cram stuff that will be removed in a shot time.
[ -d ~/.tmp ] || mkdir -p ~/.tmp

# Make sure there is the directory where local binaries are stored and push
# it to $PATH. Many GNU/Linux distros have that directory in their path and
# it would be nice to have here.
[ -d ~/.local/bin ] || mkdir -p ~/.local/bin
(echo "$PATH" | grep -q ~/.local/bin) || export PATH=~/.local/bin:$PATH

# I put my executables here.
[ -d ~/.bin ] || mkdir -p ~/.bin
export PATH=~/.bin:$PATH

# Generate ten passwords of a given length [default = 20].
pw-gen () {
  pwgen -cnys1 ${1:-20} 10
}

# Shred files.
alias shred='shred -uvz'

# ***********
# * HASKELL *
# ***********

# Set the environment for Haskell. Remember to modify a bit ~/.ghcup/env.
# !!! For the very first time, you have to change the order paths are piled
# !!! into PATH in ~/.ghcup/env.
[ -f ~/.ghcup/env ] && source ~/.ghcup/env

# Make ghci warn you even for the slightest thing. 
alias ghci='ghci -Wall'

# All the temporary stuff downloaded by ghcup is crammed into ~/.tmp.
alias ghcup='TMPDIR=~/.tmp ghcup'

# **********
# * RACKET *
# **********

# The line below is in case you have installed Racket in your home, as the
# installer of Racket does by default. If you have got Racket from the Arch
# Linux repos, then no need for such small correction.
[ -d ~/racket/bin ] && export PATH=~/racket/bin:$PATH

# **********
# * PYTHON *
# **********

alias py='python3'

if [ -f ~/.local/venv/bin/activate ]; then
  # do not modify the PS1
  export VIRTUAL_ENV_DISABLE_PROMPT=1
  source ~/.local/venv/bin/activate
fi

# Pipx auto-completion.
eval "$(register-python-argcomplete pipx)"

# ********
# * PERL *
# ********

alias pl='perl'

# Your local Perl.
PATH="$HOME/perl5/bin${PATH:+:${PATH}}"
export PATH
PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL5LIB
PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_LOCAL_LIB_ROOT
PERL_MB_OPT="--install_base \"$HOME/perl5\""
export PERL_MB_OPT
PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"
export PERL_MM_OPT

# ********
# * RUBY *
# ********

export GEM_HOME=~/gems
export PATH=~/.gem/ruby/3.0.0/bin:$PATH
export PATH=~/.local/share/gem/ruby/3.0.0/bin:$PATH
export PATH=~/gems/bin:$PATH

# *******
# * TEX *
# *******

# TeX Live paths are added in an autonomous script, generated by a script
# installing TeX Live I use.
[ -f ~/.tlrc ] && source ~/.tlrc

# Interrogate CTAN for packages containing a given file.
tlmgr_search () {
  tlmgr search --global --file "/$1" | grep -P ':$' | tr -d ':'
}

# Install ALL the packages listed by `tlmgr_search`.
tlmgr_search_install () {
  tlmgr_search "$1" | xargs tlmgr install
}

# *******************
# * DOWNLOAD VIDEOS *
# *******************

alias yt='yt-dlp --restrict-filenames -o "%(title)s.%(ext)s"'
alias smallest-yt='yt -S "+size,+br"'

# *******
# * GIT *
# *******

# !!! Just avoid the function below. !!!
git-zero () {
  git checkout --orphan temp-branch
  git add --all
  now=$(date +"%H:%M | %d %b %Y")
  git commit -am "reborn $now"
  git branch -D main
  git branch -m main
}

# Within a git repo read .gitignore and delete all the corresponding stuff
# inside the same tree. Observe that you should run this command from the
# base of your repository.
clean-git-repo () {
  grep -vP '^\s*(#|$)' .gitignore \
    | xargs -I % find . -path './.git' -prune -o -iname '%' -delete
}

# *******
# * ADB *
# *******

# Disable a given app.
alias adb-disable='adb shell pm disable-user --user 0'

# Enable a disabled app
alias adb-enable='adb shell pm enable'

# Uninstall an app
alias adb-uninstall='adb shell pm uninstall -k --user 0'

# Reinstall an app.
alias adb-reinstall='adb shell pm install-existing'

# *********************
# * CREATING LIVE USB *
# *********************

# When you have to create a Live USB.
make-live-usb () {
  sudo mkfs.vfat /dev/sdb -I
  sudo dd if=$1 of=/dev/sdb bs=4M status=progress conv=fsync
}

